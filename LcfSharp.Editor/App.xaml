<Application x:Class="LcfSharp.Editor.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"             
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"  
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- Merge the Classic theme resource dictionary -->
                <ResourceDictionary Source="/PresentationFramework.Classic;component/themes/Classic.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="Window">
                <Setter Property="FontFamily" Value="Tahoma"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
                <Setter Property="TextOptions.TextRenderingMode" Value="Grayscale"/>
                <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Background" Value="#F0F0F0"/>
            </Style>
            <Style x:Key="{x:Type TabItem}"
           TargetType="{x:Type TabItem}">
                <Setter Property="FocusVisualStyle"
                Value="{StaticResource &#276;}"/>
                <Setter Property="Padding" Value="4 0 4 0"/>
                <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
                <Setter Property="VerticalContentAlignment"
                Value="Stretch"/>
                <!--Setter Property="TabStripPlacement" Value="{Binding Path=TabStripPlacement,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" /-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <theme:ClassicBorderDecorator x:Name="ClassicBorder"
                                                  SnapsToDevicePixels="true"
                                                  BorderStyle="TabTop"
                                                  Background="{TemplateBinding Background}"
                                                  BorderBrush="{x:Static theme:ClassicBorderDecorator.ClassicBorderBrush}"
                                                  BorderThickness="2">
                                <ContentPresenter
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                          VerticalAlignment="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                          ContentSource="Header"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"/>
                            </theme:ClassicBorderDecorator>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected"
                                 Value="true">
                                    <Setter Property="Panel.ZIndex"
                                    Value="1"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement"
                                 Value="Bottom">
                                    <Setter Property="BorderStyle"
                                    Value="TabBottom"
                                    TargetName="ClassicBorder"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement"
                                 Value="Left">
                                    <Setter Property="BorderStyle"
                                    Value="TabLeft"
                                    TargetName="ClassicBorder"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement"
                                 Value="Right">
                                    <Setter Property="BorderStyle"
                                    Value="TabRight"
                                    TargetName="ClassicBorder"/>
                                </Trigger>
                                <MultiTrigger>
                                    <!-- Selected and Top -->
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected"
                                           Value="true"/>
                                        <Condition Property="TabStripPlacement"
                                           Value="Top"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin"
                                    Value="-2"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <!-- Selected and Bottom -->
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected"
                                           Value="true"/>
                                        <Condition Property="TabStripPlacement"
                                           Value="Bottom"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin"
                                    Value="-2"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <!-- Selected and Left -->
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected"
                                           Value="true"/>
                                        <Condition Property="TabStripPlacement"
                                           Value="Left"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Padding"
                                    Value="11,2,14,2"/>
                                    <Setter Property="Margin"
                                    Value="-2"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <!-- Selected and Right -->
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected"
                                           Value="true"/>
                                        <Condition Property="TabStripPlacement"
                                           Value="Right"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Padding"
                                    Value="14,2,11,2"/>
                                    <Setter Property="Margin"
                                    Value="-2"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled"
                                 Value="false">
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- GridView Style -->
            <Style 
           TargetType="{x:Type ListView}">
                <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="BorderBrush"
                Value="{x:Static theme:ClassicBorderDecorator.ClassicBorderBrush}"/>
                <Setter Property="BorderThickness"
                Value="2"/>
                <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll"
                Value="true"/>
                <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <theme:ClassicBorderDecorator Name="Bd"
                                                  BorderStyle="Sunken"
                                                  Background="{TemplateBinding Background}"
                                                  BorderBrush="{TemplateBinding BorderBrush}"
                                                  BorderThickness="{TemplateBinding BorderThickness}"
                                                  SnapsToDevicePixels="true">
                                <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
                                      Padding="{TemplateBinding Padding}">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                            </theme:ClassicBorderDecorator>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled"
                                 Value="false">
                                    <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="true" />
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <!-- GridView ScrollViewer Style -->
            <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}"
           TargetType="{x:Type ScrollViewer}">
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid Background="{TemplateBinding Background}"
                                    SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <!-- Grid.Column="0" Grid.Row="0" -->
                                <DockPanel Margin="{TemplateBinding Padding}">
                                    <!-- Column Headers Scroll Viewer -->
                                    <ScrollViewer DockPanel.Dock="Top"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden"
                                              Focusable="false">
                                        <GridViewHeaderRowPresenter Columns="{Binding Path=TemplatedParent.View.Columns,RelativeSource={RelativeSource TemplatedParent}}"
                                                                ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle,RelativeSource={RelativeSource TemplatedParent}}"
                                                                ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate,RelativeSource={RelativeSource TemplatedParent}}"
                                                                ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector,RelativeSource={RelativeSource TemplatedParent}}"
                                                                ColumnHeaderStringFormat="{Binding Path=TemplatedParent.View.ColumnHeaderStringFormat,RelativeSource={RelativeSource TemplatedParent}}"
                                                                AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder,RelativeSource={RelativeSource TemplatedParent}}"
                                                                ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu,RelativeSource={RelativeSource TemplatedParent}}"
                                                                ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip,RelativeSource={RelativeSource TemplatedParent}}"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </ScrollViewer>
                                    <!-- Items Scroll Viewer -->
                                    <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                        KeyboardNavigation.DirectionalNavigation="Local"
                                                        Content="{TemplateBinding Content}"
                                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                                        CanContentScroll="{TemplateBinding CanContentScroll}"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </DockPanel>
                                <!-- Horizontal Scroll Bar -->
                                <ScrollBar Name="PART_HorizontalScrollBar"
                                       Orientation="Horizontal"
                                       Grid.Row="1"
                                       Minimum="0.0"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Value="{Binding Path=HorizontalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                       Cursor="Arrow"/>
                                <!-- Vertical Scroll Bar -->
                                <ScrollBar Name="PART_VerticalScrollBar"
                                       Orientation="Vertical"
                                       Grid.Column="1"
                                       Minimum="0.0"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Value="{Binding Path=VerticalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                       Cursor="Arrow"/>
                                <!-- Right Bottom Corner -->
                                <DockPanel Grid.Column="1"
                                       Grid.Row="1"
                                       Background="{Binding Path=Background,ElementName=PART_VerticalScrollBar}"
                                       LastChildFill="false">
                                    <Rectangle DockPanel.Dock="Left"
                                           Width="1"
                                           Fill="White"
                                           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                    <Rectangle DockPanel.Dock="Top"
                                           Height="1"
                                           Fill="White"
                                           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                </DockPanel>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            
            <Style x:Key="{x:Type GridViewColumnHeader}"
           TargetType="{x:Type GridViewColumnHeader}">
                <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
                <Setter Property="VerticalContentAlignment"
                Value="Center"/>
                <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <Setter Property="BorderBrush"
                Value="{x:Static theme:ClassicBorderDecorator.ClassicBorderBrush}"/>
                <Setter Property="BorderThickness"
                Value="3"/>
                <Setter Property="Padding"
                Value="2,0,2,0"/>
                <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Grid SnapsToDevicePixels="true">
                                <!-- GridViewColumnHeader Content -->
                                <theme:ClassicBorderDecorator x:Name="ContentContainer"
                                                      BorderStyle="Raised"
                                                      Background="{TemplateBinding Background}"
                                                      BorderThickness="{TemplateBinding BorderThickness}"
                                                      BorderBrush="{TemplateBinding BorderBrush}">
                                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </theme:ClassicBorderDecorator>
                                <Canvas>
                                    <Thumb x:Name="PART_HeaderGripper"
                                   Style="{StaticResource &#247;}"
                                   Background="Transparent"/>
                                </Canvas>
                                <Border x:Name="HeaderPressBorder"
                                BorderBrush="#FF808080"
                                BorderThickness="1"
                                Visibility="Hidden"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed"
                                 Value="true">
                                    <Setter Property="BorderStyle"
                                    Value="RaisedPressed"
                                    TargetName="ContentContainer"/>
                                    <Setter Property="BorderThickness"
                                    Value="0"
                                    TargetName="ContentContainer"/>
                                    <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="HeaderPressBorder"/>
                                    <Setter Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                </Trigger>
                                <Trigger Property="Height"
                                 Value="Auto">
                                    <Setter Property="MinHeight"
                                    Value="20"/>
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                 Value="false">
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Role"
                     Value="Padding">
                        <Setter Property="Template">
                            <Setter.Value>
                                <!--The same as normal header, just no gripper.-->
                                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                                    <theme:ClassicBorderDecorator BorderStyle="Raised"
                                                          Background="{TemplateBinding Background}"
                                                          BorderThickness="{TemplateBinding BorderThickness}"
                                                          BorderBrush="{TemplateBinding BorderBrush}" />
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="Height"
                                         Value="Auto">
                                            <Setter Property="MinHeight"
                                            Value="20"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="Role"
                     Value="Floating">
                        <Setter Property="Opacity"
                        Value="0.5056"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                                    <Canvas Name="PART_FloatingHeaderCanvas">
                                        <Rectangle Opacity="0.3034"
                                           Fill="#FF000000"
                                           Width="{TemplateBinding ActualWidth}"
                                           Height="{TemplateBinding ActualHeight}" />
                                    </Canvas>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style 
           TargetType="{x:Type ListViewItem}">
                <Setter Property="Background"
                Value="Transparent"/>
                <Setter Property="VerticalContentAlignment"
                Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                                <!--remove the HorizontalAlignment due to HeaderRowPresenter does not have the ability to align to center or right-->
                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected"
                                 Value="true">
                                    <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected"
                                           Value="true"/>
                                        <Condition Property="Selector.IsSelectionActive"
                                           Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled"
                                 Value="false">
                                    <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
